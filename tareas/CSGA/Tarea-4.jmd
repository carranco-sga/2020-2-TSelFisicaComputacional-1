
# Tarea 4

## Ejercicio 1:

Obtengan, para la familia de mapeos cuadrática $Q_c(x)$, el diagrama que muestra el exponente de Lyapunov en términos de $c$, para $c\in[-2,2]$.

- ¿Qué particularidad ocurre (en términos del exponente de Lyapunov) para los valores de $c$ donde hay bifurcaciones?

Comencemos definiendo una función que dado un mapeo $f$ y un punto inicial, $x_0$, calcule una aproximación numérica del exponente de Lyapunov.

Para ello, nos conviene cargar el código ya realizado anteriormente:

```julia
include("Código/Tools.jl")
using Main.Tools
```

Recordemos que podemos calcular el exponente de Lyapunov de un mapeo unidimensional de dos formas equivalentes, aunque numéricamente distintas:

- Calculando el logaritmo valor absoluto de la derivada de la iteración $n$-ésima del mapeo, o,
- Sumando los valores absolutos de los logaritmos de la derivada del mapeo evaluada en los iterados $x_0,\ldots,x_{n-1}$.

Dado a que con lo que hemos realizado es relativamente sencillo implementar ambas definiciones, procedemos a hacerlo:

```julia
"""
    Lyapunov(f, x0, n = 1000)

Dado un mapeo \$f\$ y una condición inicial \$x_0\$, otorga la aproximación \$\\lambda_n(x_0) = \\frac{1}{n} \\ln |f^{n}'(x_0)|\$ del exponente de Lyapunov.
"""
Lyapunov(f, x0, n = 1000) = log(abs(derivada(iterar(f, n), x0)))/n

"""
    Lyapunov_2(f, x0, n = 1000)

Dado un mapeo \$f\$ y una condición inicial \$x_0\$, otorga la aproximación \$\\lambda_n(x_0) = \\frac{1}{n} \\sum_{i = 0}^{n - 1} \\ln |f'(x_i)|\$ del exponente de Lyapunov.
"""
Lyapunov_2(f, x0, n = 1000) = sum(broadcast(x -> log(abs(derivada(f, x))), iterados(f, n - 1)(x0)))/n
```

Nos conviene, para nuestro ejemplo, realizar dos tipos de análisis de las funciones definidas.
El primero, verificar qué tan rápido se alcanza la convergencia al límite $n\rightarrow \infty$, y, el segundo, para verificar qué tan computacionalmente eficientes son nuestras funciones.

Para esto, cargamos un par de paqueterías útiles:

```julia
using PyPlot
using BenchmarkTools
```

Y definimos nuestro mapeo de interés:

```julia
Q(c) = x -> x^2 + c
```

Para el análisis de convergencia de los métodos, veamos un caso específico y comparemos ambos:

```julia
plt.figure()
plt.xlabel(L"x")
plt.ylabel(L"\lambda_n(x)")
plt.title("Convergencia del primer método")
plt.ylim(-1, 1)

xs = -2:0.01:2

for n in [5, 10, 20, 50, 100, 500, 1000, 2000, 5000, 10000]

    λs_n = broadcast(x -> Lyapunov(Q(-0.5), x, n), xs)
    plt.plot(xs, λs_n, label = "n = $n")
end

plt.legend()
```

```julia
clf()

plt.figure()
plt.xlabel(L"x")
plt.ylabel(L"\lambda_n(x)")
plt.title("Convergencia del segundo método")
plt.ylim(-1, 1)

xs = -2:0.01:2

for n in [5, 10, 20, 50, 100, 500, 1000, 2000, 5000, 10000]

    λs_n = broadcast(x -> Lyapunov_2(Q(-0.5), x, n), xs)
    plt.plot(xs, λs_n, label = "n = $n")
end

plt.legend()
```

Observamos que ambos métodos se comportan similarmente y convergen al mismo valor para la misma cantidad de iteraciones (lo cual tiene sentido, dado que para $n$ fijo, ambos métodos son formalmente idénticos).
Más aún, la convergencia se alcanza en este caso para cuando tenemos $n \approx 500$.
Sin embargo, el primer método presenta una deficiencia numérica que se muestra si se itera demasiado: puede ser que el valor de la derivada, antes de tomar el logaritmo, sea demasiado grande como para ser representado adecuadamente por `Float64`, lo que provoca errores por desbordamiento. 
Podemos ver que los valores ficticios para $n = 5000$ y $n = 10000$ no ocurren si se usan `BigFloat`s:

```julia
plt.figure()
plt.xlabel(L"x")
plt.ylabel(L"\lambda_n(x)")
plt.title("Convergencia del primer método con BigFloats")
plt.ylim(-1, 1)

xs = -2:0.01:2

for n in [5, 10, 20, 50, 100, 500, 1000, 2000, 5000, 10000]

    λs_n = broadcast(x -> Lyapunov(Q(-0.5), BigFloat(x), n), xs)
    plt.plot(xs, λs_n, label = "n = $n")
end

plt.legend()
```

Una vez tenemos una idea del número de iteraciones que debemos realizar para obtener el límite, procedemos a hacer un par de tests para ver cómo se comparan computacionalmente las dos definiciones:

```julia
# Evaluamos por primera vez el macro de benchmarks para tener una comparación más fiel:
@benchmark 1 + 1

#Procedemos a la comparación.
@benchmark a = broadcast(x -> Lyapunov(Q(-0.5), x, 1000), -1:0.005:1)
```

```julia
@benchmark b = broadcast(x -> Lyapunov_2(Q(-0.5), x, 1000), -1:0.005:1)
```

Se observa que aunque la definciones son matemáticamente equivalentes y numéricamente dan resultados similares, al momento de realizar el cálculo hay una mejora modesta en el tiempo de ejecución con el primer algoritmo y una mejora muy importante en el uso de memoria con el primer algoritmo.

Dicho esto, podemos concluir que aunque el segundo algoritmo es robusto en el sentido que sigue dando resultados correctos si se itera "de más", éste es mucho menos eficiente en términos de la memoria ocupada.
Considerando "suficientes, pero no demasiadas" iteraciones con el primer algoritmo podemos aprovechar su relativa eficiencia.

Para poder ver lo que sucede con el exponente de Lyapunov como función de $c$ y $x_0$, nos conviene realizar una gráfica de contorno a la que podamos sobreponer el diagrama de bifurcación.

Para evitar problemas con la escala, en el caso de que el valor del exponente sea muy grande, definamos una función que acote los resultados (con el respectivo signo):

```julia
acotar(cota, x) = abs(x) <= cota ? x : sign(x)*cota
acotar(cota) = x -> acotar(cota, x)
```

Asimismo, nos conviene definir, para comparar con el diagrama de bifurcación, una función que clasifique si el exponente suministrado resulta o no caótico.

```julia
caótico(λ) = λ > 0 ? true : false
```

Procedemos a calcular los valores de los exponentes en una malla del diagrama $(c, x_0)$:

```julia
# Aún con las mejoras, generar un diagrama tan fino toma tiempo, por eso se deja comentado el código.


#=
cs = -2.5:0.0001:0.5
x0s = -3:0.001:3
xs = -2:0.1:2

λs = [Lyapunov(Q(c), x0) for x0 in x0s, c in cs]
λs_acotar = acotar(1.0).(λs)
λs_caótico = caótico.(λs)
=#
```

A partir de esto, podemos graficar:

```julia
# Valor del exponente.

#=
using LaTeXStrings # Cargamos un paquete para mejorar el título

plt.figure(figsize=(10,10))
plt.xlabel(L"c")
plt.ylabel(L"x")

plt.title(LaTeXString("Exponente de Lyapunov de \$Q_c(x)\$"))

plt.contourf(cs, x0s, λs_acotar, cmap = plt.cm.get_cmap("RdBu_r"), extend = "both")
plt.colorbar()

savefig("Lyapunov.png")
=#
```

```julia
# Valor del exponente con el diagrama de bifurcaciones.

#=
plt.figure(figsize=(10,10))
plt.xlabel(L"c")
plt.ylabel(L"x")

plt.title(LaTeXString("Exponente de Lyapunov de \$Q_c(x)\$"))

plt.contourf(cs, x0s, λs_acotar, cmap = plt.cm.get_cmap("RdBu_r"), extend = "both")
plt.colorbar()

plt.xlim(-2.5, 0.5)
plt.ylim(-3, 3)

for c in cs[1:20:end]

    Xs = vcat(iterados(Q(c), 10_000, n_fin = 2048).(var_Dual.(xs))...)
    
    Xs_atractores = filter(x -> abs(derivada(x)) <= 1, Xs)
    Xs_repulsores = filter!(x -> abs(derivada(x)) > 1, Xs)
    
    Cs_atractores = fill(c, length(Xs_atractores))
    Cs_repulsores = fill(c, length(Xs_repulsores))

    plt.plot(Cs_atractores, principal.(Xs_atractores), marker = ",", lw = 0, linestyle = "", color = "blue", alpha = 0.005)
    plt.plot(Cs_repulsores, principal.(Xs_repulsores), marker = ",", lw = 0, linestyle = "", color = "red", alpha = 0.005)
end

savefig("Lyapunov_bifurcación.png")
=#
```

```julia
# Valor del exponente con el diagrama de bifurcaciones con los puntos atractivos solamente.

#=
plt.figure(figsize=(10,10))
plt.xlabel(L"c")
plt.ylabel(L"x")

plt.title(LaTeXString("Exponente de Lyapunov de \$Q_c(x)\$"))

plt.contourf(cs, x0s, λs_acotar, cmap = plt.cm.get_cmap("RdBu_r"), extend = "both")
plt.colorbar()

plt.xlim(-2.5, 0.5)
plt.ylim(-3, 3)

for c in cs[1:20:end]

    Xs = vcat(iterados(Q(c), 10_000, n_fin = 2048).(var_Dual.(xs))...)
    
    Xs_atractores = filter!(x -> abs(derivada(x)) <= 1, Xs)
    
    Cs_atractores = fill(c, length(Xs_atractores))

    plt.plot(Cs_atractores, principal.(Xs_atractores), marker = ",", lw = 0, linestyle = "", color = "blue", alpha = 0.01)
end

savefig("Lyapunov_bifurcación_atractores.png")
=#
```

```julia
# Zonas caóticas.

#=
using LaTeXStrings # Cargamos un paquete para mejorar el título

plt.figure(figsize=(10,10))
plt.xlabel(L"c")
plt.ylabel(L"x")

plt.title(LaTeXString("Exponente de Lyapunov de \$Q_c(x)\$"))

plt.contourf(cs, x0s, λs_caótico, cmap = plt.cm.binary, extend = "both")

savefig("Lyapunov_2.png")
=#
```

```julia
# Zonas caóticas con el diagrama de bifurcaciones.

#=
plt.figure(figsize=(10,10))
plt.xlabel(L"c")
plt.ylabel(L"x")

plt.title(LaTeXString("Exponente de Lyapunov de \$Q_c(x)\$"))

plt.contourf(cs, x0s, λs_caótico, cmap = plt.cm.binary, extend = "both")

plt.xlim(-2.5, 0.5)
plt.ylim(-3, 3)

for c in cs[1:20:end]

    Xs = vcat(iterados(Q(c), 10_000, n_fin = 2048).(var_Dual.(xs))...)
    
    Xs_atractores = filter(x -> abs(derivada(x)) <= 1, Xs)
    Xs_repulsores = filter!(x -> abs(derivada(x)) > 1, Xs)
    
    Cs_atractores = fill(c, length(Xs_atractores))
    Cs_repulsores = fill(c, length(Xs_repulsores))

    plt.plot(Cs_atractores, principal.(Xs_atractores), marker = ",", lw = 0, linestyle = "", color = "blue", alpha = 0.005)
    plt.plot(Cs_repulsores, principal.(Xs_repulsores), marker = ",", lw = 0, linestyle = "", color = "red", alpha = 0.005)
end

savefig("Lyapunov_bifurcación_2.png")
=#
```

```julia
# Zonas caóticas con el diagrama de bifurcaciones con los puntos atractivos solamente.

#=
plt.figure(figsize=(10,10))
plt.xlabel(L"c")
plt.ylabel(L"x")

plt.title(LaTeXString("Exponente de Lyapunov de \$Q_c(x)\$"))

plt.contourf(cs, x0s, λs_caótico, cmap = plt.cm.binary, extend = "both")

plt.xlim(-2.5, 0.5)
plt.ylim(-3, 3)

for c in cs[1:20:end]

    Xs = vcat(iterados(Q(c), 10_000, n_fin = 2048).(var_Dual.(xs))...)
    
    Xs_atractores = filter!(x -> abs(derivada(x)) <= 1, Xs)
    
    Cs_atractores = fill(c, length(Xs_atractores))

    plt.plot(Cs_atractores, principal.(Xs_atractores), marker = ",", lw = 0, linestyle = "", color = "blue", alpha = 0.01)
end

savefig("Lyapunov_bifurcación_atractores_2.png")
=#
```

```julia
# Comparación del diagrama de bifurcación con el exponente de Lyapunov.

#=
plt.figure(figsize=(10,10))

plt.subplot(211)
plt.title(LaTeXString("Exponente de Lyapunov y diagrama de bifurcación de \$Q_c(x)\$"))
plt.xlabel(L"c")
plt.ylabel(L"x")
plt.xlim(-2.5, 0.5)
plt.ylim(-3, 3)

for c in cs[1:20:end]

    Xs = vcat(iterados(Q(c), 10_000, n_fin = 2048).(var_Dual.(xs))...)
    
    Xs_atractores = filter(x -> abs(derivada(x)) <= 1, Xs)
    Xs_repulsores = filter!(x -> abs(derivada(x)) > 1, Xs)
    
    Cs_atractores = fill(c, length(Xs_atractores))
    Cs_repulsores = fill(c, length(Xs_repulsores))

    plt.plot(Cs_atractores, principal.(Xs_atractores), marker = ",", lw = 0, linestyle = "", color = "blue", alpha = 0.005)
    plt.plot(Cs_repulsores, principal.(Xs_repulsores), marker = ",", lw = 0, linestyle = "", color = "red", alpha = 0.005)
end

plt.subplot(212)
plt.xlabel(L"c")
plt.ylabel(L"x")
plt.xlim(-2.5, 0.5)
plt.ylim(-3, 3)

plt.contourf(cs, x0s, λs_acotar, cmap = plt.cm.get_cmap("RdBu_r"), extend = "both")

savefig("Comparación.png")
=#
```

```julia
# Comparación del diagrama de bifurcación (parte atractiva) con el exponente de Lyapunov.

#=
plt.figure(figsize=(10,10))

plt.subplot(211)
plt.title(LaTeXString("Exponente de Lyapunov y diagrama de bifurcación de \$Q_c(x)\$"))
plt.xlabel(L"c")
plt.ylabel(L"x")
plt.xlim(-2.5, 0.5)
plt.ylim(-3, 3)

for c in cs[1:20:end]

    Xs = vcat(iterados(Q(c), 10_000, n_fin = 2048).(var_Dual.(xs))...)
    
    Xs_atractores = filter!(x -> abs(derivada(x)) <= 1, Xs)
    
    Cs_atractores = fill(c, length(Xs_atractores))

    plt.plot(Cs_atractores, principal.(Xs_atractores), marker = ",", lw = 0, linestyle = "", color = "blue", alpha = 0.01)
end

plt.subplot(212)
plt.xlabel(L"c")
plt.ylabel(L"x")
plt.xlim(-2.5, 0.5)
plt.ylim(-3, 3)

plt.contourf(cs, x0s, λs_acotar, cmap = plt.cm.get_cmap("RdBu_r"), extend = "both")

savefig("Comparación_atractores.png")
=#
```

Los valores de los exponentes de Lyapunov se pueden observar en la imagen `Lyapunov.png`.
Tonos azules corresponden a zonas no caóticas y tonos rojos a zonas caóticas.
Éste, con el diagrama de bifurcación sobrepuesto se puede observar en la imagen `Lyapunov_bifurcación.png`.
Asimismo, se muestra sólamente la rama atractiva en la imagen `Lyapunov_bifurcación_atractores.png`.
Ésta última se observa a continuación:

![Lyapunov_bifurcaci%C3%B3n_atractores.png](Lyapunov_bifurcaci%C3%B3n_atractores.png)

Para tener mayor claridad respecto a las zonas no-caóticas y caóticas, se anexan las versiones (con un sufijo `_2`) en las que un exponente de Lyapunov positivo se muestra en negro y un exponente de Lyapunov negativo se muestra en blanco.

En general se observa que cuando se dan las bifurcaciones de doblamiento de periodo, el exponente de Lyapunov se vuelve positivo, es decir, se da la transición al caos.

Para poder comparar más detenidamente el diagrama de bifurcación respecto a los valores del exponente de Lyapunov, se muestran ambos lado a lado en `Comparación.png` y `Comparación_atractores.png`.
Esta última imagen se muestra a continuación:

![Comparaci%C3%B3n_atractores.png](Lyapunov_bifurcaci%C3%B3n_atractores.png)

- ¿Qué particularidad ocurre (en términos del exponente de Lyapunov) cuando tenemos *ciclos superestables*, es decir, cuando $x=0$ es parte de un ciclo periódico?

De las imágenes, podemos conjeturar que cuando cero es un punto fijo, el exponente de Lyapunov para los elementos al interior del intervalo $(-p_+(C_n), p_+(C_n))$ se mantiene negativo (no caótico).

Podemos elaborar en esta conjetura rescatando herramientas de la tarea anterior:

```julia
#Definimos la función que tiene por ceros a los valores del parámetro de los ciclos superestables.
q(n) = c -> iterar(Q(c), 2^n)(0.0)

#Y usamos aproximaciones a las bifurcaciones de doblamiento de periodo [1](https://en.wikipedia.org/wiki/Feigenbaum_constants#Non-linear_maps)
# como condición inicial para encontrar los valores de $C_n$.
cs = [-0.75, -1.25, -1.3680989, -1.3940462, -1.3996312, -1.4008286, -1.4010853, -1.4011402]
Cs = [Newton(q(i - 1), cs[i]) for i in eachindex(cs)]
```

Finalmente, podemos calcular el exponente de Lyapunov a lo largo de un intervalo que contenga al dominio señalado para los valores de $C_n$:

```julia
xs = -3:0.01:3

plt.xlabel(L"x")
plt.ylabel(L"λ_{1000}(x)")

plt.title("Exponente de Lyapunov para \$C_n\$")

for i in eachindex(Cs)

    λs = broadcast(x -> Lyapunov_2(Q(Cs[i]), x), xs)
    plt.plot(xs, λs, label = "C_$(i - 1)")
end

plt.legend()
```

De dónde verificamos que, al menos para los casos bajo estudio, éste parece ser el caso.

Sin embargo, usando las definiciones del exponente de Lyapunov podemos concluir algo más importante en general para las parejas $(c, 0)$, y algo particular para las parejas $(C_n,x)$.
Sabemos que $Q'_c(x) = 2x$, por lo que necesariamente, si $x_0 = 0$, $Q'_c(x_0) \equiv 0$. (Esto es válido en general para cualquier valor de $c$, no sólo los valores de $C_n$.)
Esto implica, con la segunda definición equivalente, que uno de los factores del producto de valores de la derivada del mapeo en al interior del logaritmo es idénticamente cero, lo que hace que el valor del exponente de Lyapunov en cero, siempre sea menos infinito. (Es decir, el sistema, localmente en torno al cero, *nunca* presenta caos, sino que en algún sentido, todo lo contrario.)

(En caso de que resulte incómodo el separar el logaritmo cuando uno de los términos sea cero, quizá por temores de que alguno de los iterados diverja y cancele el cero proveniente del término comentado, es fácil notar que la forma explícita de $Q^{n}_c(x)$ siempre es un polinomio de grado $2^n$ **sin término lineal**, lo que hace que la derivada de $Q^{n}_c(x)$ nunca tenga un término independiente no nulo, por lo que al evaluar en cero, el valor de la derivada es idénticamente cero para cualquier $n$. 
Esto confirma que en efecto, en el cero, *nunca* hay caos.)

Respecto a los valores del parámetro en los que hay un ciclo superestable, como todos los iterados de $x_0$ tienen el mismo exponente de Lyapunov que $x_0$, sabemos que todos los puntos de periodo $2^n$ *nunca* presentan caos, ya que el valor del exponente de Lyapunov en éstos es el mismo que el del cero, menos infinito.
(En efecto hay $2^n$ puntos de periodo $2^n$ distintos por lo comentado en la tarea anterior sobre criterios de divisibilidad y clases de equivalencia.)

## Ejercicio 2:

Estudiar la dinámica para el mapeo cuadrático $Q_c(x)$, con $c=-2.2$.

- ¿Cómo se caracteriza el valor al que tiende *casi* cualquier condición inicial en el
intervalo $I=[-p_+,p_+]$ (donde $p_+$ es el valor positivo tal que $Q_c(p_+)=p_+$), después de muchos iterados? (El intervalo $I$ es donde "toda la dinámica interesante ocurre".)

Sabemos que $p_+(c)$ está dado por $p_+(c) = \frac{1}{2} + \sqrt{\frac{1}{4} - c}$, por lo que, para $c = 2.2$, tenemos:

```julia
p₊ = 1/2 + sqrt(1/4 + 2.2)
```

Generemos un muestreo del intervalo de interés:

```julia
I = -p₊:0.00001:p₊
```

Observemos lo que ocurre cuando iteramos nuestras muestras 200 veces:

```julia
iterar(Q(-2.2), 200).(I) |> unique
```

*Todas* las condiciones iniciales que consideramos eventualmente convergen a infinito. 
Observemos que esto no necesariamente es cierto para todos los puntos del intervalo, dado que existen, por lo menos, dos puntos de periodo finito: $(p_-, p_+)$.

- Caractericen los subconjuntos de $I$ tales que, después de $n=1,2,3,\dots$ iterados de $Q_c(x)$, su intersección con $I$ es vacía.

Recordemos que los puntos de $I$ satisfacen $ -p_+ \leq x \leq p_+ \iff |x| \leq p_+$.
Definamos a la familia de conjuntos $J_n$ como:

$$ J_n = \{ x \in I | Q^{n}_{-2.2}(x) \in I \}. $$

Esto lo podemos implementar mediante:

```julia
J(n) = filter(x -> abs(iterar(Q(-2.2), n, x)) <= p₊, I)
```

Gráficamente, se pueden observar los conjuntos $J_n$ en la siguiente figura.

```julia
plt.figure()
plt.title(L"J_n")
plt.xlabel("x")
plt.ylabel("n")

for i in 0:10
    
    J_n = J(i)
    n_escalada = fill(i, length(J_n))
    plt.plot(J_n, n_escalada, marker = ",", lw = 0, linestyle = "", color = "blue")
end
```

- Caracterizen al complemento del conjunto de los casos anteriores, es decir, cuando los iterados de la condición inicial **no** llegan a donde *casi* cualquier condición inicial termina. ¿Cómo se conoce a este conjunto?

Podemos usar la función `setdiff` para obtener el complemento relativo de $J_n$ en $I$:

```julia
plt.figure()
plt.title(L"J_n^C")
plt.xlabel("x")
plt.ylabel("n")

for i in 0:10
    
    J_n_C = setdiff(I, J(i))
    n_escalada = fill(i, length(J_n_C))
    plt.plot(J_n_C, n_escalada, marker = ",", lw = 0, linestyle = "", color = "red")
end
```

Es necesario comentar que dado a que más y más de las condiciones iniciales se van filtrando conforme el número de iteraciones aumenta, estas aparentan formar una línea continua al estudiar el complemento.
Sin embargo, esto es sólamente por la forma en la que se grafica, en la que los conjuntos $J_n$ se vuelven *densos* y "porosos" en $I$.
Cambiando la escala de las gráficas y haciendo zoom se observa que la línea del complemento no es continua, sino porosa.

Podemos concluir que éste conjunto es de tipo Cantor. (La construcción clásica del conjunto de Cantor involucra dividir el intervalo unitario en tercios idénticos y remover el tercio central, repitiendo el proceso en los segmentos restantes.)

## Ejercicio 3:

- Usando el análisis gráfico para un valor de $c$ *ligeramente* anterior al punto donde se observa la ventana de periodo 3 para la familia $Q_c(x)$, y uno en la ventana de periodo 3, concluyan el tipo de bifurcación que se observa.

- Comparen la dinámica para ambos valores de $c$ del inciso anterior. ¿Cómo es el exponente de Lyapunov en cada caso?

- Encuentren el valor de $c$ donde se da el ciclo superestable de periodo 3. (Nuevamente, usen el método de Newton con una buena semilla inicial para $c$.) Demuestren que para este valor de $c$ el mapeo $Q_c^3(x)$ tiene *ocho* puntos fijos, donde dos de ellos son puntos fijos de $Q_c(x)$, y los otros 6 forman dos secuencias periódicas, de periodo 3 en $Q_c(x)$, una de ellas estable y la otra inestable.

(Los siguientes incisos usan el valor de $c$ encontrado en el inciso anterior.)

- Denotando al ciclo inestable de periodo 3 como $\alpha\mapsto \beta\mapsto\gamma$, con $\gamma<\beta<\alpha$, uno puede asociar a cada uno de estos valores un valor $\hat\alpha, \hat\beta, \hat\gamma$, tales que $Q_c^3(\hat\alpha)=\alpha$, $Q_c^3(\hat\beta)=\beta$, $Q_c^3(\hat\gamma)=\gamma$. ¿Qué podemos concluir de un punto que cae en cualquiera de los intervalos $[\alpha,\hat\alpha]$, $[\beta,\hat\beta]$ y $[\hat\gamma,\gamma]$, en términos de los iterados sucesivos?

- Definiendo los intervalos $I_0=[\hat\beta, \alpha]$, $I_1=[\gamma,\beta]$, mostrar que bajo la acción de $Q_c(x)$ se cumple: (i) $Q_c(I_0) \supset I_1$, y (ii) $Q_c(I_1) \supset I_0\cup I_1$. ¿Qué propiedad *importante* de $Q_c(x)$ se utiliza aquí?

(Los intervalos $I_0$ e $I_1$, y estas propiedades, son básicos en la demostración del teorema "periodo tres implica caos".)

```julia
```
